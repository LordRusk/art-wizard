#!/usr/bin/env sh

# Variables and script settings
divider="--------------"

# User defined variables
clear
while : ; do
	printf 'Are you installing on Arch or Artix: '
	read -r OS
	case $OS in
		[Aa][Rr][Cc][Hh]) OS="arch"; break ;;
		[Aa][Rr][Tt][Ii][Xx]) OS="artix"; break ;;
		*) printf '\nPlease answer either Arch or Artix\n' ;;
	esac
done

printf "\n$divider\n"
while : ; do
	printf "\nDo you prefer vim or nano as a text editor: "
	read -r editor
	case $editor in
		[Vv][Ii][Mm]) printf 'Installing vim...\n'; pacman --needed --noconfirm -Sy vim >/dev/null 2>&1;editor="vim"; break;;
		[Nn][Aa][Nn][Oo]) editor="nano"; break;;
		*) printf "\nPlease answer either 'vim' or 'nano'\n" ;;
	esac
done

printf "\n$divider\n"
while : ; do
	printf "\nAre you installing on a 'Bios' or a 'Efi' machine: "
	read -r bios
	case $bios in
		[Bb][Ii][Oo][Ss]) bios="bios"; break;;
		[Ee][Ff][Ii]) bios="efi"; break;;
		*) printf "\nPlease answer 'Bios' or 'Efi'\n";;
	esac
done

# Configure and format partitions
printf "\n$divider\n"
while : ; do
	printf "\nWould you like to configure the drives yourself or\ncompletely wipe the drive and do a complete (re)install? [Configure/Auto]: "
	read -r auto
	case $auto in
		[Cc][Oo][Nn][Ff][Ii][Gg][Uu][Rr][Ee]) auto="configure"; break;;
		[Aa][Uu][Tt][Oo]) auto="auto"; break;;
		*) printf "\nPlease answer either 'Configure' or 'Auto'" ;;
	esac
done

# Give tips and a zsh menu for user
# configred partition schemes.
if [ "$auto" = "configure" ]; then
	printf "\n$divider\n"
	[ $bios = "bios" ] && printf "\nIf you're going to (re)install grub, mount your boot partition at /mnt/boot\n"
	[ $bios = "efi" ] && printf "\nIf you're going to (re)install grub, mount your boot partition at /esp"
	printf "General rule of thumb, root partition is mounted at /mnt\n"
	printf "and home pertition (if you have one) is mounted at /mnt/home\n"
	printf "NOTICE: You are still in the script. After you are done in the\nzsh prompt, 'exit' and the script will continue.\n"
	zsh
	wait

	printf "\n$divider\n"
	printf "\nPlease select the drive you would like to install $OS to\n"
	while : ; do
		printf "$(printf "$(lsblk -lp | grep "disk $" | awk '{print $1, "("$4")"}')")\n"
		read -r cdrive
		case $cdrive in
			/dev/sd[a-z]) break;;
			*) printf 'Please pick a drive from the list...\n'
		esac
	done
elif [ "$auto" = "auto" ]; then
	printf "\n$divider\n"
	printf "\nPlease select the drive you would like to install $OS to\n"
	while : ; do
		printf "$(printf "$(lsblk -lp | grep "disk $" | awk '{print $1, "("$4")"}')")\n"
		read -r cdrive
		case $cdrive in
			/dev/sd[a-z]) break;;
			*) printf 'Please pick a drive from the list...\n'
		esac
	done

	printf "\n$divider\n"
	printf "\nHow big do you want your root partition to be? (30gb,50gb,etc): "
	read -r rps >/dev/null 2>&1
	while ! echo "$rps" | grep -o "[0-9+][a-z+]"; do
		printf 'Not acceptable size!\n'
		printf 'How big do you want your root partition to be? (30gb,50gb,etc): '
		read -r rps >/dev/null 2>&1
	done

	printf "\n$divider\n"
	while : ; do
		printf "\nDo you want a swap partition? [y/N]: "
		read -r ssp >/dev/null 2>&1
		case $ssp in
			[Yy]) \
 			ssp="y"
			printf 'How big do you want your swap patition? Usually 1.5x your ram: '
			read -r sps >/dev/null 2>&1
			while ! echo "$sps" | grep -o "[0-9+][a-z+]"; do
				printf 'Not acceptable size!'
				printf 'How big do you want your swap patition? Usually 1.5x your ram: '
				read -r sps >/dev/null 2>&1
			done;break;;
			*) break;;
		esac
	done

	[ "$bios" = "bios" ] && \
		printf "\n$divider\n"
		while : ; do
			printf "\nDo you want a 'dos' or a 'gpt' partition scheme? [dos/gpt]: "
			read -r ps
			case $ps in
				[Dd][Oo][Ss]) ps="dos"; break;;
				[Gg][Pp][Tt]) ps="gpt"; break;;
				*) printf "\nUnkown or unsupported partition scheme, please answer either 'dos' or 'gpt'\n" ;;
			esac
		done

	# Big O'l code block for auto partitioning
	# using the partitioner script and user
	# defined variables.
	if [ "$bios" = "efi" ] && [ "$ssp" != "y" ]; then
		sh ~/art-wizard/bin/partitioner gns $cdrive 500mb $rps
		mkfs.ext4 "$cdrive"2
		mount "$cdrive"2 /mnt
		mkfs.fat -F32 "$cdrive"1
		mount "$cdrive"1 /mnt/esp
		mkfs.ext4 "$cdrive"3
		mkdir /mnt/home
		mount "$cdrive"3 /mnt/home
	elif [ "$bios" = "efi" ] && [ "$ssp" = "y" ]; then
		sh ~/art-wizard/bin/partitioner gs $cdrive 500mb $rps $sps
		mkfs.ext4 "$cdrive"3
		mount "$cdrive"3 /mnt
		mkfs.fat -F32 "$cdrive"1
		mount "$cdrive"1 /esp
		mkfs.ext4 "$cdrive"4
		mkdir /mnt/home
		mount "$cdrive"4 /mnt/home
		mkswap "$cdrive"2
		swapon "$cdrive"2
	elif [ "$ssp" != "y" ] && [ "$ps" = "dos" ]; then
		sh ~/art-wizard/bin/partitioner dns $cdrive 500mb $rps
		mkfs.ext4 "$cdrive"2
		mount "$cdrive"2 /mnt
		mkfs.ext4 "$cdrive"1
		mkdir /mnt/boot
		mount "$cdrive"1 /mnt/boot
		mkfs.ext4 "$cdrive"3
		mkdir /mnt/home
		mount "$cdrive"3 /mnt/home
	elif [ "$ssp" = "y" ] && [ "$ps" = "dos" ]; then
		sh ~/art-wizard/bin/partitioner ds $cdrive 500mb $rps $sps
		mkfs.ext4 "$cdrive"3
		mount "$cdrive"3 /mnt
		mkfs.ext4 "$cdrive"1
		mkdir /mnt/boot
		mount "$cdrive"1 /mnt/boot
		mkfs.ext4 "$cdrive"4
		mkdir /mnt/home
		mount "$cdrive"4 /mnt/home
		mkswap "$cdrive"2
		swapon "$cdrive"2
	elif [ "$ssp" != "y" ] && [ "$ps" = "gpt" ]; then
		sh ~/art-wizard/bin/partitioner gns $cdrive 500mb $rps
		mkfs.ext4 "$cdrive"2
		mount "$cdrive"2 /mnt
		mkfs.ext4 "$cdrive"1
		mkdir /mnt/boot
		mount "$cdrive"1 /mnt/boot
		mkfs.ext4 "$cdrive"3
		mkdir /mnt/home
		mount "$cdrive"3 /mnt/home
	elif [ "$ssp" = "y" ] && [ "$ps" = "gpt" ]; then
		sh ~/art-wizard/bin/partitioner ds $cdrive 500mb $rps $sps
		mkfs.ext4 "$cdrive"3
		mount "$cdrive"3 /mnt
		mkfs.ext4 "$cdrive"1
		mkdir /mnt/boot
		mount "$cdrive"1 /mnt/boot
		mkfs.ext4 "$cdrive"4
		mkdir /mnt/home
		mount "$cdrive"4 /mnt/home
		mkswap "$cdrive"2
		swapon "$cdrive"2
	fi
fi

# Mirrorlist || Init System
printf "\n$divider\n"
case $OS in
	arch) \
	printf "\nThe Arch mirror list can be slow and unreliable,\nplease edit the mirrorlist for faster speeds.\nPress Enter to continue..."
	read tmp >/dev/null
	$editor /etc/pacman.d/mirrorlist ;;
	artix) \
	while : ; do
		printf "\nWhich init system would you like to install? [Openrc/Runit/s6]"
		read -r init
		case $init in
			[Oo][Pp][Ee][Nn][Rr][Cc]) init="openrc" ;;
			[Rr][Uu][Nn][Ii][Tt]) init="runit" ;;
			[Ss]6) init="s6" ;;
			*) printf 'Please answer either Openrc, Runit, or s6' ;;
		esac
	done
esac

# Install
clear
case $OS in
	arch) pacstrap /mnt linux linux-firmware base fzf $editor ;;
	artix) case $init in
		openrc) basestrap /mnt linux linux-firmware base elogind-openrc openrc fzf $editor ;;
		runit) basestrap /mnt linux linux-firmware base elogind-runit runit fzf $editor ;;
		s6) basestrap /mnt linux linux-firmware base elogind-s6 s6 fzf $editor ;;
	esac ;;
esac

# Post Install
case $OS in
	arch)
	genfstab -U -p /mnt >> /mnt/etc/fstab

	export OS
	export bios
	export editor
	export cdrive
	export divider
	export progsfile
	export dotfilesrepo

	cp $progsfile /mnt
	cp ~/art-wizard/bin/larbs-core /mnt
	cp ~/art-wizard/bin/aw-post-chroot /mnt
	arch-chroot /mnt sh aw-post-chroot
	rm /mnt/aw-post-chroot

	printf "\n$divider\n"
	printf "\nWould you like to restart now? [Y/n]: "
	read -r tmp
	case $tmp in
		n) exit ;;
		*) reboot ;;
	esac
	;;

	artix)
	fstabgen -U -p /mnt >> /mnt/etc/fstab

	export OS
	export bios
	export init
	export editor
	export cdrive
	export divider
	export progsfile
	export dotfilesrepo

	cp $progsfile /mnt
	cp ~/art-wizard/bin/larbs-core /mnt
	cp ~/art-wizard/bin/aw-post-chroot /mnt
	artools-chroot /mnt sh aw-post-chroot
	rm /mnt/aw-post-chroot

	printf "\n$divider\n"
	printf "\nWould you like to restart now? [Y/n]: "
	read tmp
	case $tmp in
		n) exit ;;
		*) reboot ;;
	esac
	;;
esac
