#!/usr/bin/env sh

# Locale
clear
printf "Please choose a region and a city\nPress Enter to continue..."
read tmp >/dev/null 2>&1
rg=$(ls /usr/share/zoneinfo | fzf --layout=reverse)
ct=$(ls /usr/share/zoneinfo/"$rg" | fzf --layout=reverse)
ln -sf /usr/share/zoneinfo/"$rg"/"$ct" /etc/localtime
hwclock --systohc

clear
printf "Uncomment the locales you need\nPress Enter to continue..."
read tmp >/dev/null 2>&1
$editor /etc/locale.gen
locale-gen

# Bootloader
printf "\n$divider\n"
printf "\nWould you like to install a bootloader? [Y/n]: "
read -r tmp
case $tmp in
	[Nn]) break;;
	*) case $bios in
		bios) \
		while : ; do
			printf "Would you like to install 'grub' or 'grub-legacy' (untested): "
			read -r bootldr
			case $bootldr in
				[Gg][Rr][Uu][Bb]) bootldr="grub"; break;;
				[Gg][Rr][Uu][Bb]\-[Ll][Ee][Gg][Aa][Cc][Yy]) bootldr="grub-legacy"; break;;
				*) printf "Please answer either 'grub' or 'grub-legacy'"
			esac
		done

		# Code block for installing
		# a boot manager on a bios
		# machine.
		if [ "$bootldr" = "grub" ]; then
			printf "Installing grub...\n"
			pacman --needed --noconfirm -Syu grub >/dev/null 2>&1
			grub-install "$cdrive"
			grub-mkconfig -o /boot/grub/grub.cfg
		elif [ "$bootldr" = "grub-legacy" ]; then
			pacman --noconfirm -Syu git fakeroot sudo
			git clone https://aur.archlinux.org/grub-legacy
			useradd tmp
			cd grub-legacy
			sudo -u tmp makepkg --noconfirm -si
			cd ..
			rm -rf grub-legacy
			pacman --noconfirm -R git fakeroot sudo
		fi ;;
		efi) \
		while : ; do
			printf "Would you like to install 'grub' or 'refind': "
			read -r bootldr
			case $bootldr in
				[Gg][Rr][Uu][Bb]) bootldr="grub"; break;;
				[Rr][Ee][Ff][Ii][Nn][Dd]) bootldr="refind"; break;;
				*) printf "Please answer either 'grub' or 'refind'"
			esac
		done

		# Code block for installing
		# a boot manager on a efi
		# machine.
		if [ "$bootldr" = "grub" ]; then
			printf "Installing grub...\n"
			pacman --needed --noconfirm -Syu grub efibootmgr >/dev/null 2>&1
			grub-install --target=x86_64-efi --efi-directory=/esp --bootloader-id=GRUB
			grub-mkconfig -o /boot/grub/grub.cfg
		elif [ "$bootldr" = "refind" ]; then
			pacman --noconfirm -Syu refind-efi efibootmgr
			refind --usedefualts $cdrive --alldrivers
		fi ;;
	esac
esac

# Added user and user password
printf "\n$divider\n"
printf "\nWould you like to create a user? [Y/n]: "
read -r cu
case $cu in
	[Nn]) break;;
	*) \
	printf "Please enter the name of your new user: "
	read -r name
	while ! echo "$name" | grep "^[a-z_][a-z0-9_-]*$" >/dev/null 2>&1; do
		printf "Username not valid. Give a username beginning with a\n[letter, with only lowercase letters, - or _]: "
		read -r name
	done
	useradd -m -g wheel "$name"
	sup() { [ -z "$pmsg" ] || echo "$pmsg"; passwd "$name" || rsup; }
	rsup() { pmsg="\nThe password you entered was incorrect, please enter a new password: "; sup; }
	sup
esac

# Setting the root password
printf "\n$divider\n"
printf "\nWould you like to set a root password [Y/n]: "
read -r srp
case $srp in
	[Nn]) break;;
	*) \
	srp() { [ -z "$pmsg" ] || echo "$pmsg"; passwd root || rsrp; }
	rsrp() { pmsg="The password you entered was incorrect, please enter a new password"; srp; }
	srp
esac

# Sudo || Doas
printf "\n$divider\n"
printf "\nWould you like to install 'Sudo' or 'Doas'? [sudo/doas/N]: "
read -r sudo
case $sudo in
	[Ss][Uu][Dd][Oo]) sudo="sudo" ;;
	[Dd][Oo][Aa][Ss]) sudo="doas" ;;
esac

if [ "$sudo" = "sudo" ]; then
	printf "Installing sudo...\n"
	pacman --needed --noconfirm -S sudo >/dev/null 2>&1

	printf "Would you like to edit the sudoers file?\n(User created in wheel group) (/etc/sudoers) [Y/n]: "
	read -r tmp
	case $tmp in
		[Nn]) ;;
		*) $editor /etc/sudoers ;;
	esac
elif [ "$sudo" = "doas" ]; then
	git clone https://github.com/slicer69/doas
	cd doas
	pacman -S make
	make install
	pacman -R make
	cd ..
	rm -rf doas/
	mkdir -p /usr/local/etc/

	printf "\n$divder\n"
	printf "\nWould you like to copy a tmplate doas config file? [Y/n]: "
	read -r tmp
	case $tmp in
		[Nn]) ;;
		*) cp ~/art-wizard/share/doas-tmplate /usr/local/etc/doas.conf ;;
	esac

	printf 'Would you like to edit the doas config file? (/usr/local/etc/doas.conf) [Y/n]'
	read -r tmp
	case $tmp in
		[Nn]) ;;
		*) $editor /usr/local/etc/doas.conf ;;
	esac
fi

printf "\n$divider\n"
printf "\nWould you like to install NetworkManager? [Y/n]"
read -r tmp
case $tmp in
	[Nn]) exit;;
	*) \
	if [ "$OS" = "arch" ]; then
		printf "Installing NetworkManager...\n"; pacman -Syu networkmanager >/dev/null 2>&1
		printf 'Would you like to enable NetworkManager [Y/n]: '
		read -r $tmp
		case $tmp in
			[Nn]) exit;;
			*) printf "Enabling NetworkManager...\n"; systemctl enable NetworkManager >/dev/null 2>&1;;
		esac
	elif [ "$OS" = "artix" ]; then
		printf "Installing NetworkManager...\n"; pacman -Syu networkmanager-"${init}" >/dev/null 2>&1
		printf 'Would you like to enable NetworkManager [Y/n]: '
		read -r $tmp
		case $tmp in
			[Nn]) exit;;
			*) \
			[ "$init" = "openrc" ] && rc-service NetworkManager sart-wizard; rc-update add NetworkManager default
			[ "$init" = "runit" ] && ln -s /etc/runit/sv/NetworkManager /etc/runit/sv/NetworkManager
			[ "$init" = "s6" ] && s6-rc-bundle add NetworkManager
			;;
		esac
	fi ;;
esac

# Release custom dotfiles if specified
[ -z "$name" ] || [ -z "$dotfilesrepo" ] || printf "\nDeploying dotfiles..." && sudo -u "$name" git clone "$dotfilesrepo" "/home/$name" >/dev/null 2>&1 && rm -f "/home/$name/README.md" "/home/$name/readme" "/home/$name/LICENSE"

# Post Script
printf "\n$divider\n"
printf "\nRemoving unconsented to programs from system..."; pacman --noconfirm -R fzf >/dev/null 2>&1
